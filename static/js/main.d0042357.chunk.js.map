{"version":3,"sources":["components/Header.js","components/Search.js","components/Nav.js","components/Photo.js","components/NotFound.js","components/PhotoContainer.js","config.js","App.js","serviceWorker.js","components/PageNotFound404.js","index.js"],"names":["Header","className","Search","state","searchText","onSearchChange","event","setState","target","value","handleSubmit","preventDefault","searchQuery","query","path","props","onSearch","history","push","currentTarget","reset","bind","onSubmit","this","type","name","placeholder","onChange","ref","input","required","fill","height","viewBox","width","xmlns","d","Component","withRouter","Nav","onClick","search","to","pathname","Photo","src","farm_id","server","id","secret","alt","NotFound","PhotoContainer","photoList","photos","data","title","length","map","photo","key","toString","farm","apiKey","App","searchPhotos","loading","axios","get","then","res","catch","err","console","log","Boolean","window","location","hostname","match","PageNotFound404","ReactDOM","render","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0042357.chunk.js","sourcesContent":["import React from 'react';\n\n// Header component\nconst Header = () => {\n  return (\n    <div className=\"main-header\">\n      <h1>React Photo Gallery</h1>\n      <p>Search Flickr for photos</p>\n      <br/>\n    </div>\n  )\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Search component\nclass Search extends Component {\n  constructor() {\n    super();\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  state = {\n    searchText: \"\"\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchText: event.target.value });\n  }\n  \n  handleSubmit = event => {\n    event.preventDefault();\n    let searchQuery = this.query.value;\n    let path = `/search/${searchQuery}`;\n    this.props.onSearch(searchQuery);\n    this.props.history.push(path);\n    event.currentTarget.reset();\n  }\n\n  render() {\n\n    return (\n    <form className=\"search-form\" onSubmit={this.handleSubmit}>\n      <input type=\"search\" name=\"search\" placeholder=\"Search...\" onChange={this.onSearchChange} ref={ (input) => this.query = input} required/>\n      <button type=\"submit\" className=\"search-button\">\n        <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n          <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        </svg>\n      </button>\n    </form>\n    )\n  }\n}\n\nexport default withRouter(Search);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Search from './Search';\n\n// Nav component\nconst Nav = (props) => {\n\n  return (\n    <nav className=\"main-nav\">\n      <ul>\n        <li><Link onClick={()=><Search onSearch={props.search('rainbows')} />} \n          to={{\n            pathname: \"/search/rainbows\",\n            // search: `search=rainbows`\n          }}>Rainbows</Link></li>\n        <li><Link onClick={()=><Search onSearch={props.search('space')} />}\n          to={{\n            pathname: \"/search/space\",\n            // search: `search=planets`\n          }}>Space</Link></li>\n        <li><Link onClick={()=><Search onSearch={props.search('boats')} />}\n          to={{\n            pathname: \"/search/boats\",\n            // search: `search=boats`\n          }}>Boats</Link></li>\n        <li><Link onClick={()=><Search onSearch={props.search('cameras')} />}\n          to={{\n            pathname: \"/search/cameras\",\n            // search: `search=cameras`\n          }}>Cameras</Link></li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Nav","import React from 'react';\n\nconst Photo = (props) => {\n  return (\n    <li>\n      <img className=\"photo\" src={`https://farm${props.farm_id}.staticflickr.com/${props.server}/${props.id}_${props.secret}.jpg`} alt=\"\" />\n    </li>\n  )\n}\n\nexport default Photo","import React from 'react';\n\n// No Search Results component\nconst NotFound = () => {\n  return (\n    <li className=\"not-found\">\n      <h3>No Results Found</h3>\n      <p>You search did not return any results. Please try again.</p>\n    </li>\n  )\n}\n\nexport default NotFound;","import React from 'react'\nimport Photo from './Photo';\nimport NotFound from './NotFound';\n\n// Photos Component\nconst PhotoContainer = (props) => {\n\n  const photos = props.data;\n  let title = props.title;\n  let photoList;\n\n  if (photos.length > 0) {\n    photoList = photos.map( photo =>\n      <Photo \n        id={photo.id}\n        key={photo.id.toString() + 1}\n        server={photo.server}\n        secret={photo.secret}\n        farm_id={photo.farm}\n      />\n    )\n  } else {\n    title = 'Sorry dawg'\n    photoList = <NotFound />\n  }\n\n  return (\n    <div className=\"photo-container\">\n      <h2 className=\"results-title\">{title}</h2>\n        <ul>\n          {photoList}\n        </ul> \n    </div>\n  )\n}\n\nexport default PhotoContainer;","const apiKey = '27b238609287dd59c24700b9ec153d44';\n\nexport default apiKey","// Imports \nimport React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\n\n\n// App Components\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Nav from './components/Nav';\nimport PhotoContainer from './components/PhotoContainer';\n\nimport apiKey from './config';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.searchPhotos = this.searchPhotos.bind(this);\n    this.state = {\n      photos: [],\n      loading: true,\n      query: ''\n    }\n  }\n\n  componentDidMount() {\n    this.searchPhotos(this.state.query || \"rainbows\");\n  }\n\n  searchPhotos = (query)  => {\n    this.setState({ loading: true })\n    axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&tags=${query}&api_key=${apiKey}&per_page=24&format=json&nojsoncallback=1`)\n      .then(res => {\n        this.setState({\n          photos: res.data.photos.photo,\n          loading: false,\n          query: query\n        })\n      })\n      .catch(err => {\n        console.log('Error fetching and parsing data', err);\n      });\n  }\n\n  render() {\n    return (\n        <div className=\"Container\">\n          <Header />\n            <Search onSearch={this.searchPhotos} />\n            <Nav search={this.searchPhotos}/>\n            {\n              (this.state.loading)\n              ? <p>Loading...</p> \n              : <PhotoContainer data={this.state.photos} title={this.state.query}/>\n            }\n        </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n// 404 error component\nconst PageNotFound404 = () => {\n  return (\n    <div className=\"not-found\">\n      <h2>Page Not Found</h2>\n      <p>The page you requested does not exist.</p>\n    </div>\n  ) \n}\n\nexport default PageNotFound404;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport { \n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport PageNotFound404 from './components/PageNotFound404';\n\n// Router handling\nReactDOM.render(\n  <Router>\n    <Switch>\n      <Route exact path=\"/\" component={App}/>\n      <Route path=\"/search/:results\" component={App}/>\n      <Route component={PageNotFound404}/>\n    </Switch>\n  </Router>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}